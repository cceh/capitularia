#
# This is the Makefile that generates all the files in the cache directory and
# imports data into the postgres database for collation and fulltext search.
#
# This Makefile is run by the crontab of user capitularia on the API server.
#
# For a graph see:
# https://cceh.github.io/capitularia/vm/transformations.html#graph-of-all-transformations
#
# The cache directory on AFS contains the HTML files for display to the user and
# lots of other files: one big corpus file with all metadata tags and one file
# for every chapter in every manuscript, and more.
#

ROOT_DIR  := /afs/rrz.uni-koeln.de/vol/www/projekt/capitularia/http/docs/cap

PUB_DIR   := $(ROOT_DIR)/publ
PRIV_DIR  := $(ROOT_DIR)/intern/Transkriptionen
CACHE_DIR := $(ROOT_DIR)/publ/cache

XSL_DIR      := .
MSS_DIR      := $(PUB_DIR)/mss
MSS_PRIV_DIR := $(PRIV_DIR)/Transkriptionsauftraege/FertigeTranskriptionen
CAPIT_DIR    := $(PUB_DIR)/capit
BIB_DIR      := $(PUB_DIR)/bibl
RES_DIR      := $(PUB_DIR)/resources

BK_TEXT_DIR  := $(PRIV_DIR)/BK_Text_Superstruktur
BK_TEXTZEUGE := $(BK_TEXT_DIR)/bk-textzeuge.xml

MSS := $(wildcard $(MSS_DIR)/*.xml)
IDS := $(notdir $(basename $(MSS)))

XSLTPROC  := /usr/bin/xsltproc --nonet --novalid --nomkdir
SAXON     := /usr/bin/saxon
IMPORT    := cd ../server; python3 -m scripts.import_data -vvv -c ./server.conf

TOUCH = mkdir -p $(dir $@) && touch "$@"
CLEAN_TARGET_DIR = -rm -rf $(dir $@) && mkdir -p $(dir $@)

vpath %.xsl $(XSL_DIR)

all: mss capits lists
	touch $(CACHE_DIR)/last_make_run

# include dependencies (generated by xslt_dep.py:
# make make_dependencies in the root project dir)
include dependencies.inc


################ Targets
# make directories first

mss: | dirs

mss_priv: | dirs

capits: | dirs

lists: | dirs


################ Manuscripts

mss : $(patsubst %,$(CACHE_DIR)/mss/%.header.html,$(IDS))
mss : $(patsubst %,$(CACHE_DIR)/mss/%.transcript.html,$(IDS))
mss : $(patsubst %,$(CACHE_DIR)/mss/%.footer.html,$(IDS))

mss : $(patsubst %,$(CACHE_DIR)/mss/%.transcript.commented.html,$(IDS))

mss : $(CACHE_DIR)/mss/cte-137.html
mss : $(CACHE_DIR)/mss/cte-137-de.html

mss_priv : $(patsubst %,$(CACHE_DIR)/internal/mss/%.header.html,$(IDS))
mss_priv : $(patsubst %,$(CACHE_DIR)/internal/mss/%.transcript.html,$(IDS))
mss_priv : $(patsubst %,$(CACHE_DIR)/internal/mss/%.footer.html,$(IDS))


################ Capitularies

capits : $(patsubst %.xml,$(CACHE_DIR)/capits/pre814/%.html,$(notdir $(wildcard $(CAPIT_DIR)/pre814/*.xml)))
capits : $(patsubst %.xml,$(CACHE_DIR)/capits/ldf/%.html,$(notdir $(wildcard $(CAPIT_DIR)/ldf/*.xml)))
capits : $(patsubst %.xml,$(CACHE_DIR)/capits/post840/%.html,$(notdir $(wildcard $(CAPIT_DIR)/post840/*.xml)))
capits : $(patsubst %.xml,$(CACHE_DIR)/capits/undated/%.html,$(notdir $(wildcard $(CAPIT_DIR)/undated/*.xml)))

################ Manuscript Lists

lists : $(CACHE_DIR)/lists/mss-table.html
lists : $(CACHE_DIR)/lists/mss-capit.html
lists : $(CACHE_DIR)/lists/mss-idno.html
lists : $(CACHE_DIR)/lists/mss-key.html

$(CACHE_DIR)/lists/mss-capit.html : $(MSS_DIR)/lists/mss_by_cap.xml $(MSS_DIR)/lists/manuscripts.xml \
									mss-capit.xsl common-3.xsl config-3.xsl
	$(SAXON) -s:"$<" -xsl:"mss-capit.xsl" -o:"$@" manuscripts="$(MSS_DIR)/lists/manuscripts.xml"

$(CACHE_DIR)/lists/mss-idno.html : 	$(MSS_DIR)/lists/manuscripts.xml $(CACHE_DIR)/lists/corpus.xml \
									mss-idno.xsl common-3.xsl config-3.xsl
	$(SAXON) -s:"$<" -xsl:"mss-idno.xsl" -o:"$@" corpus="$(CACHE_DIR)/lists/corpus.xml"


################ Capitulary Lists

lists: $(CACHE_DIR)/lists/capit-all.html
lists: $(CACHE_DIR)/lists/capit-pre814.html
lists: $(CACHE_DIR)/lists/capit-ldf.html
lists: $(CACHE_DIR)/lists/capit-post840.html
lists: $(CACHE_DIR)/lists/capit-undated.html


################ Bits and Pieces

lists : $(CACHE_DIR)/lists/downloads.html
lists : $(CACHE_DIR)/lists/changes.html
lists : $(CACHE_DIR)/lists/changes90.html
lists : $(CACHE_DIR)/lists/bib.html
lists : $(CACHE_DIR)/lists/places.html

$(CACHE_DIR)/lists/corpus.xml : $(MSS_DIR)/*.xml mss-idno.xsl common-3.xsl config-3.xsl
	$(SAXON) -it:main -xsl:"corpus.xsl" -o:"$@" dir="$(MSS_DIR)"

corpus : $(CACHE_DIR)/lists/corpus.xml

lists : corpus

## extract each xml corresp as its own file (lots of files!)
## fulltext and collation

fulltext : $(patsubst %,$(CACHE_DIR)/extracted/%/,$(IDS))

$(CACHE_DIR)/extracted/%/ : $(MSS_DIR)/%.xml mss-extract-chapters.xsl mss-transcript-collation.xsl \
							mss-transcript-phase-1.xsl common-3.xsl config-3.xsl
	$(CLEAN_TARGET_DIR)
	$(SAXON) -s:"$<" -xsl:"mss-extract-chapters.xsl" directory="$(dir $@)"
	-$(TOUCH)


################ Scrape Targets

# these are timestamp files to record when the data was last imported into the
# database

init_db:
	$(IMPORT) --init
	$(RM) $(CACHE_DIR)/last_*_scrape

$(CACHE_DIR)/last_corpus_scrape : $(CACHE_DIR)/lists/corpus.xml $(CAPIT_DIR)/lists/capit_all.xml
	$(IMPORT) --mss      $(CACHE_DIR)/lists/corpus.xml
	$(IMPORT) --cap-list $(CAPIT_DIR)/lists/capit_all.xml
	touch "$@"

$(CACHE_DIR)/last_fulltext_scrape : $(wildcard $(CACHE_DIR)/extracted/*/*.xml $(CACHE_DIR)/extracted/*/*.txt)
	$(file >$@)	$(foreach fn,$?,$(file >>$@,$(fn))) # put the very long argument list into a file with newlines
	$(IMPORT) --fulltext @$@                        # read filenames to import from the file
	touch "$@"

# copies information from the wordpress db into the postgres db
# the timestamp file doesn't depend on anything
$(CACHE_DIR)/last_status_scrape :
	$(IMPORT) --publish
	touch "$@"


scrape_corpus :   $(CACHE_DIR)/last_corpus_scrape

scrape_fulltext : $(CACHE_DIR)/last_fulltext_scrape

scrape_status :   $(CACHE_DIR)/last_status_scrape


################ Other Stuff

# do not waste time trying to make these files:

%.xml: ;
Makefile: ;
dependencies.inc: ;
%.xsl: ;

clean:
	rm -rf $(CACHE_DIR)

dirs:
	mkdir -p $(CACHE_DIR)
	mkdir -p $(CACHE_DIR)/mss \
			 $(CACHE_DIR)/capits \
			 $(CACHE_DIR)/capits/pre814 \
			 $(CACHE_DIR)/capits/ldf \
			 $(CACHE_DIR)/capits/post840 \
			 $(CACHE_DIR)/capits/undated \
			 $(CACHE_DIR)/lists \
			 $(CACHE_DIR)/internal/mss \
			 $(CACHE_DIR)/extracted

.PHONY: all mss capits lists clean dirs corpus fulltext

.PHONY: init_db scrape_corpus scrape_fulltext scrape_status $(CACHE_DIR)/last_status_scrape
