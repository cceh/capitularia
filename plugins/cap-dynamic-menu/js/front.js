/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_cceh_capitularia"] = self["webpackChunk_cceh_capitularia"] || []).push([["cap-dynamic-menu-front"],{

/***/ "./plugins/cap-dynamic-menu/src/js/front.js":
/*!**************************************************!*\
  !*** ./plugins/cap-dynamic-menu/src/js/front.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
/***/ (() => {

eval("function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/** @module plugins/dynamic-menu */\n\n/**\n * The dynamic menu applet.\n *\n * The dynamic menu is generated from xpath expressions that query the\n * page content.  There is one xpath expression for every level of the menu.\n * Use the standard wordpress admin interface to define the xpath expressions:\n *\n * To make a dynamic menu, insert a *Custom Link* item into any Wordpress menu\n * and give it a magic url of: :code:`#cap_dynamic_menu#`.  The *Custom Link*\n * item will be replaced by the generated menu.\n *\n * Put all the xpath expressions for each level of the menu into the\n * *Description* field.  Separate each level with a :code:`§` (section sign).\n *\n * The default xpath expressions are:\n * :code:`//h3[@id]§//h4[@id]§//h5[@id]§//h6[@id]`, which generate a 4 level\n * deep menu built from all <h3>-<h6> elements that have an :code:`id`\n * attribute.\n *\n * The caption of a generated menu item is taken from the\n * :code:`data-cap-dyn-menu-caption` attribute on the source element or\n * from the source element's :code:`textContent`.\n *\n * All classes in the *CSS Classes* field in the Wordpress admin interface are\n * copied over to each generated menu item along with a class\n * :code:`$class-level-$level`.  Eg. a class of :code:`my-menu` would become\n * :code:`my_menu` and :code:`my-menu-level-1`.\n *\n * All classes on the elements matched with the xpath expressions, that start\n * with :code:`dynamic-menu-`, are copied to each generated menu item.\n *\n * Additionally classes named :code:`menu-item`, :code:`dynamic-menu-item`, and\n * :code:`dynamic-menu-item-level-$level` are added to each generated menu item.\n *\n * .. note::\n *\n *    We use webpack as a workaround to load javascript modules in Wordpress.\n *    Wordpress cannot load javascript modules thru enqueue_script () because it\n *    lacks an option to specify type=\"module\" on the <script> element.  Webpack\n *    also packs babel-runtime for us.  babel-runtime is required for async\n *    functions.\n *\n * @file\n */\n\n/**\n * Initialize all dynamic menus on the page.\n *\n * This routine looks for an <a> with the :code:`data-cap-dynamic-menu`\n * attribute and transmogrifies it into the real menu by going through the DOM\n * of the page and adding all elements that fit the xpath'es in the attribute.\n *\n * @memberof module:plugins/dynamic-menu\n */\nfunction init_dynamic_menues() {\n  var menu_id = 1;\n  var last_id = 1;\n\n  var _iterator = _createForOfIteratorHelper(document.querySelectorAll(\"a[data-cap-dynamic-menu]\")),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var menu = _step.value;\n      var xpathes = (menu.getAttribute('data-cap-dynamic-menu') // default xpath expressions (a §-separated list)\n      || '//h3[@id]§//h4[@id]§//h5[@id]§//h6[@id]'). // undo the bloody wp_texturizer that even messes with html data attributes\n      replace(/[′’]/g, \"'\").replace(/[”]/g, '\"');\n      var wp_classes = (menu.parentNode.getAttribute('class') || '').trim().split(' ');\n      var level_attr = 'data-cap-level-' + menu_id; // set the attribute 'data-cap-level-*' on all source items\n\n      var cap_level = 1;\n\n      var _iterator2 = _createForOfIteratorHelper(xpathes.split('§')),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var xpath = _step2.value;\n          var snapshot = document.evaluate(xpath, document.body, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n\n          for (var i = 0; i < snapshot.snapshotLength; ++i) {\n            var n = snapshot.snapshotItem(i);\n            n.setAttribute(level_attr, cap_level);\n            n.setAttribute('data-cap-dyn-menu-caption', n.getAttribute('data-cap-dyn-menu-caption') || n.textContent || '');\n          }\n\n          ++cap_level;\n        } // now get the source items in document order\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var last_node_on_level = {};\n      var last_level = 1;\n      var a = [];\n\n      var _iterator3 = _createForOfIteratorHelper(document.querySelectorAll(\"[\".concat(level_attr, \"]\"))),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _n = _step3.value;\n          var id = 'cap-menu-item-id-' + last_id++;\n          var href = _n.hasAttribute('id') ? '#' + _n.getAttribute('id') : _n.getAttribute('href');\n          var level = Number(_n.getAttribute(level_attr));\n\n          var caption = _n.getAttribute('data-cap-dyn-menu-caption');\n\n          var title = caption.replace(/\\s+/g, ' ').trim(); // optionally shorten nested menu entries (eg. BK 123 c. 2)\n\n          if (level > 1 && _n.hasAttribute('data-fold-menu-entry')) {\n            var parent_caption = last_node_on_level[level - 1].getAttribute('data-cap-dyn-menu-caption');\n\n            if (caption && parent_caption && caption.indexOf(parent_caption) === 0) {\n              caption = caption.substr(parent_caption.length).trim();\n            }\n          } // add classes keyed to level from the wordpress menu definition\n\n\n          var classes = ['dynamic-menu-item'];\n          classes.push(\"dynamic-menu-item-level-\".concat(level));\n\n          var _iterator4 = _createForOfIteratorHelper(wp_classes),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var wp_class = _step4.value;\n              classes.push(wp_class);\n              classes.push(\"\".concat(wp_class, \"-level-\").concat(level));\n            } // copy classes that start with 'dynamic-menu-' from the\n            // HTML of the page to the menu.  This is a way to style\n            // arbitrary entries of the menu.\n\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          var html_classes = (_n.getAttribute('class') || '').trim().split(' ');\n\n          var _iterator5 = _createForOfIteratorHelper(html_classes),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var html_class = _step5.value;\n              classes.push(\"\".concat(html_class, \"-level-\").concat(level));\n\n              if (html_class.startsWith('dynamic-menu-')) {\n                classes.push(html_class);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          if (level === last_level) {\n            a.push('</li>');\n          }\n\n          for (var _i = level; _i < last_level; ++_i) {\n            a.push('</li>');\n            a.push('</ul>');\n          }\n\n          for (var _i2 = level; _i2 > last_level; --_i2) {\n            a.push('<ul>');\n          }\n\n          a.push(\"<li id=\\\"\".concat(id, \"\\\" class=\\\"\").concat(classes.join(' '), \"\\\">\"));\n\n          if (href) {\n            a.push(\"<a href=\\\"\".concat(href, \"\\\" title=\\\"\").concat(title, \"\\\">\").concat(caption, \"</a>\"));\n          } else {\n            a.push(\"<a title=\\\"\".concat(title, \"\\\">\").concat(caption, \"</a>\"));\n          }\n\n          last_node_on_level[level] = _n;\n          last_level = level;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      a.push('</li>');\n      menu.parentNode.outerHTML = a.join('\\n');\n      ++menu_id;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var toc = $('div.sidebar-toc > ul');\n  toc.css('display', 'none'); // Initializes the sidebar menu collapsibles\n\n  $('li.dynamic-menu-item').each(function () {\n    var $this = $(this);\n    var id = $this.attr('id') + '-ul';\n\n    if ($this.children('ul').length > 0) {\n      $this.children('a').addClass('has-opener');\n      $('<a class=\"opener\"/>').prependTo($this).attr('data-toggle', 'collapse').attr('data-target', '#' + id).addClass('collapsed');\n      $this.children('ul').attr('id', id).addClass('collapse sub-menu');\n    }\n  }); // Remove dangling links\n\n  toc.find('a[href]').each(function () {\n    // jquery interprets #BK.123 as selector id=BK and class=123\n    var href = $(this).attr('href');\n\n    if (href[0] === '#') {\n      href = '#' + $.escapeSelector(href.slice(1));\n\n      if ($(href).length === 0) {\n        $(this).removeAttr('href');\n      }\n    }\n  });\n  toc.css('display', '');\n}\n\ninit_dynamic_menues();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./plugins/cap-dynamic-menu/src/js/front.js\n");

/***/ })

},
0,[["./plugins/cap-dynamic-menu/src/js/front.js","vendor"],["./node_modules/webpack-dev-server/client/index.js?http://capitularia.fritz.box:8081","vendor"],["./node_modules/webpack/hot/dev-server.js","vendor"]]]);