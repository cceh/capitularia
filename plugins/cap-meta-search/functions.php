<?php
/**
 * Capitularia Meta Search global functions
 *
 * @package Capitularia Meta Search
 */

namespace cceh\capitularia\meta_search;

use \cceh\capitularia\lib;

/**
 * Should we perform a meta search?
 *
 * @return boolean True if this is a meta search.
 */

function is_meta_search ()
{
    return !is_admin () && array_key_exists ('fulltext', $_GET);
}

/**
 * Should we highlight search results?
 *
 * @return boolean
 */

function is_highlight ()
{
    return !is_admin () && (array_key_exists ('s', $_GET) || array_key_exists (HIGHLIGHT, $_GET));
}

/**
 * Add current namespace
 *
 * @param string $function_name The class or function name without namespace
 *
 * @return string Name with namespace
 */

function ns ($function_name)
{
    return __NAMESPACE__ . '\\' . $function_name;
}

/**
 * Sanitize a text filed.
 *
 * @param string $text The text to sanitize.
 *
 * @return The sanitized text.
 */

function sanitize ($text)
{
    return empty ($text) ? '' : strip_tags ($text);
}

/**
 * Get a list of all capitulars
 *
 * @return string[] All capitulars
 */

function get_capitulars ()
{
    $params = array (
        'status' => current_user_can ('read_private_pages') ? 'private' : 'publish'
    );
    $res = [];
    foreach (lib\api_json_request ('/data/capitularies.json/', $params) as $r) {
        $cap_id = $r['cap_id'];
        $transcriptions = $r['transcriptions'];
        if ($transcriptions > 1 && preg_match ('/^BK|^Mordek/', $cap_id)) {
            $res[] = $cap_id;
        }
    }
    return $res;
}

/**
 * Register the translations.
 *
 * @return void
 */

function on_init ()
{
    load_plugin_textdomain (LANG, false, basename (dirname (__FILE__)) . '/languages/');
}

/**
 * Register the widget with Wordpress.
 *
 * @return void
 */

function on_widgets_init ()
{
    register_widget (ns ('Widget'));
}

/**
 * Add our custom HTTP query vars
 *
 * @param array $vars The stock query vars
 *
 * @return array The stock and custom query vars
 */

function on_query_vars ($vars)
{
    $vars[] = 'fulltext';
    $vars[] = 'capit';
    $vars[] = 'place';
    $vars[] = 'notbefore';
    $vars[] = 'notafter';
    $vars[] = 'places';     // array of geonames ids
    $vars[] = 'placenames'; // array of names, used by 'You searched for: X'
    $vars[] = HIGHLIGHT;
    return $vars;
}

/**
 * Get the permalink for the search result
 *
 * Return a link that will go to the post *and* highlight the search terms
 * if followed.
 *
 * @param string $permalink The permalink generated by Wordpress
 *
 * @return string The decorated permalink
 */

function on_cap_meta_search_the_permalink ($permalink)
{
    return esc_attr (add_query_arg (HIGHLIGHT, $_GET['fulltext'] ?? $_GET['s'], $permalink));
}

/**
 * Enqueue front side scripts and styles
 *
 * @return void
 */

function on_enqueue_scripts ()
{
    wp_register_script (
        'cap-meta-search-front',
        plugins_url ('js/front.js', __FILE__),
        array ('cap-lib-front')
    );
    wp_enqueue_script  ('cap-meta-search-front');

    wp_localize_script (
        'cap-meta-search-front',
        'cap_meta_search_front_ajax_object',
        array (
            'ajaxurl' => admin_url ('admin-ajax.php')
        )
    );
}
